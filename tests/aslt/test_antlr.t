tests building and running of the antlr grammar. requires java

  $ java -jar ./antlr.jar ./Semantics.g4

  $ javac -cp ./antlr.jar *.java

  $ for op in $(grep '^0x' ./ops.txt); do printf '%s\n' ":ast A64 $op"; done > commands

  $ asli < commands > stmts

  $ java -cp .:./antlr.jar org.antlr.v4.gui.TestRig Semantics stmt_lines -tree stmts 2>antlr_err | sed 's@ (stmt\(s\?\) @\n(stmt\1 @g'
  (stmt_lines
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 64)) )) , (ident " Cse0__5 ") , (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 2)) )) ; (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Field ( (lexpr LExpr_Var ( (ident " PSTATE ") )) , (ident " V ") )) , (expr Expr_TApply ( (ident " not_bits.0 ") , [ (targs (expr (integer 1))) ] , [ (expr Expr_TApply ( (ident " cvt_bool_bv.0 ") , [ ] , [ (expr Expr_TApply ( (ident " eq_bits.0 ") , [ (targs (expr (integer 65))) ] , [ (expr Expr_TApply ( (ident " SignExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 65))) ] , [ (expr Expr_Var ( (ident " Cse0__5 ") )) ; (expr (integer 65)) ] )) ; (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 65))) ] , [ (expr Expr_TApply ( (ident " SignExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 65))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 2)) )) ; (expr (integer 65)) ] )) ; (expr Expr_TApply ( (ident " SignExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 65))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (integer 65)) ] )) ] )) ] )) ] )) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Field ( (lexpr LExpr_Var ( (ident " PSTATE ") )) , (ident " C ") )) , (expr Expr_TApply ( (ident " not_bits.0 ") , [ (targs (expr (integer 1))) ] , [ (expr Expr_TApply ( (ident " cvt_bool_bv.0 ") , [ ] , [ (expr Expr_TApply ( (ident " eq_bits.0 ") , [ (targs (expr (integer 65))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 65))) ] , [ (expr Expr_Var ( (ident " Cse0__5 ") )) ; (expr (integer 65)) ] )) ; (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 65))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 65))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 2)) )) ; (expr (integer 65)) ] )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 65))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (integer 65)) ] )) ] )) ] )) ] )) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Field ( (lexpr LExpr_Var ( (ident " PSTATE ") )) , (ident " Z ") )) , (expr Expr_TApply ( (ident " cvt_bool_bv.0 ") , [ ] , [ (expr Expr_TApply ( (ident " eq_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Var ( (ident " Cse0__5 ") )) ; (expr (bits '0000000000000000000000000000000000000000000000000000000000000000')) ] )) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Field ( (lexpr LExpr_Var ( (ident " PSTATE ") )) , (ident " N ") )) , (expr Expr_Slices ( (expr Expr_Var ( (ident " Cse0__5 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 63)) , (expr (integer 1)) )) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _R ") )) , (expr (integer 1)) )) , (expr Expr_Var ( (ident " Cse0__5 ") )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " SP_EL0 ") )) , (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Var ( (ident " SP_EL0 ") )) ; (expr (bits '1111111111111111111111111111111111111111111111111111111111100000')) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _R ") )) , (expr (integer 1)) )) , (expr Expr_TApply ( (ident " Mem.read.0 ") , [ (targs (expr (integer 8))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (integer 8)) ; (expr (integer 0)) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _R ") )) , (expr (integer 2)) )) , (expr Expr_TApply ( (ident " Mem.read.0 ") , [ (targs (expr (integer 8))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (bits '0000000000000000000000000000000000000000000000000000000000001000')) ] )) ; (expr (integer 8)) ; (expr (integer 0)) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _R ") )) , (expr (integer 3)) )) , (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (bits '0000000000000000000000000000000000000000000000000000000010000000')) ] )) )))
  (stmt (call_stmt Stmt_TCall ( (ident " Mem.set.0 ") , [ (targs (expr (integer 8))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (integer 8)) ; (expr (integer 0)) ; (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 1)) )) ] )))
  (stmt (call_stmt Stmt_TCall ( (ident " Mem.set.0 ") , [ (targs (expr (integer 8))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (bits '0000000000000000000000000000000000000000000000000000000000001000')) ] )) ; (expr (integer 8)) ; (expr (integer 0)) ; (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 2)) )) ] )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _R ") )) , (expr (integer 3)) )) , (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 64))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 3)) )) ; (expr (bits '0000000000000000000000000000000000000000000000000000000010000000')) ] )) )))
  (stmt (assignment_stmt Stmt_VarDeclsNoInit ( (type Type_Bits ( (expr (integer 3)) )) , [ ( (ident " FPDecodeRounding5__5 ") ) ] )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " FPDecodeRounding5__5 ") )) , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 2))) ; (targs (expr (integer 3))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " FPCR ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 22)) , (expr (integer 2)) )) ] )) ; (expr (integer 3)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 64)) )) , (ident " Exp9__5 ") , (expr Expr_TApply ( (ident " FixedToFP.0 ") , [ (targs (expr (integer 32))) ; (targs (expr (integer 64))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _R ") )) , (expr (integer 2)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 32)) )) ] )) ; (expr (integer 0)) ; (expr Expr_Var ( (ident " TRUE ") )) ; (expr Expr_Var ( (ident " FPCR ") )) ; (expr Expr_TApply ( (ident " cvt_bits_uint.0 ") , [ (targs (expr (integer 3))) ] , [ (expr Expr_Var ( (ident " FPDecodeRounding5__5 ") )) ] )) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 128))) ] , [ (expr Expr_Var ( (ident " Exp9__5 ") )) ; (expr (integer 128)) ] )) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _R ") )) , (expr (integer 0)) )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 36))) ; (targs (expr (integer 28))) ] , [ (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 32))) ; (targs (expr (integer 4))) ] , [ (expr (bits '00000000000000000000000000000000')) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 3))) ; (targs (expr (integer 1))) ] , [ (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 2))) ; (targs (expr (integer 1))) ] , [ (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 1))) ; (targs (expr (integer 1))) ] , [ (expr Expr_Field ( (expr Expr_Var ( (ident " PSTATE ") )) , (ident " N ") )) ; (expr Expr_Field ( (expr Expr_Var ( (ident " PSTATE ") )) , (ident " Z ") )) ] )) ; (expr Expr_Field ( (expr Expr_Var ( (ident " PSTATE ") )) , (ident " C ") )) ] )) ; (expr Expr_Field ( (expr Expr_Var ( (ident " PSTATE ") )) , (ident " V ") )) ] )) ] )) ; (expr (bits '0000000000000000000000000000')) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse7__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse6__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 8)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse5__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 16)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse4__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 24)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse3__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 32)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse2__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 40)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse1__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 48)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_ConstDecl ( (type Type_Bits ( (expr (integer 9)) )) , (ident " Cse0__5 ") , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 9))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 56)) , (expr (integer 8)) )) ] )) ; (expr (integer 9)) ] )) )))
  (stmt (assignment_stmt Stmt_VarDeclsNoInit ( (type Type_Bits ( (expr (integer 64)) )) , [ ( (ident " result__4 ") ) ] )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr (bits '0000000000000000000000000000000000000000000000000000000000000000')) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse7__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse7__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse7__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 56))) ; (targs (expr (integer 8))) ] , [ (expr (bits '00000000000000000000000000000000000000000000000000000000')) ; (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse6__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse6__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse6__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 48))) ; (targs (expr (integer 16))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 16)) , (expr (integer 48)) )) ] )) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 8))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 8)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse5__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse5__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse5__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 40))) ; (targs (expr (integer 24))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 24)) , (expr (integer 40)) )) ] )) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 16))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 16)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 16)) )) ] )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse4__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse4__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse4__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 32))) ; (targs (expr (integer 32))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 32)) , (expr (integer 32)) )) ] )) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 24))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 24)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 24)) )) ] )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse3__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse3__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse3__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 24))) ; (targs (expr (integer 40))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 40)) , (expr (integer 24)) )) ] )) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 32))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 32)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 32)) )) ] )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse2__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse2__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse2__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 16))) ; (targs (expr (integer 48))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 48)) , (expr (integer 16)) )) ] )) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 40))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 40)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 40)) )) ] )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse1__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse1__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse1__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 56))) ] , [ (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 56)) , (expr (integer 8)) )) ] )) ; (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 48))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 48)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 48)) )) ] )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (conditional_stmt Stmt_If ( (expr Expr_TApply ( (ident " slt_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse0__5 ") )) ; (expr (bits '000010000')) ] )) ,
  (stmts [
  (stmt (assignment_stmt Stmt_Assert ( (expr Expr_TApply ( (ident " and_bool.0 ") , [ ] , [ (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr (bits '000000000')) ; (expr Expr_Var ( (ident " Cse0__5 ") )) ] )) ; (expr Expr_TApply ( (ident " sle_bits.0 ") , [ (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 12))) ; (targs (expr (integer 13))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 9))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " add_bits.0 ") , [ (targs (expr (integer 9))) ] , [ (expr Expr_Var ( (ident " Cse0__5 ") )) ; (expr (bits '000000001')) ] )) ; (expr (integer 12)) ] )) ; (expr (bits '000000001000')) ] )) ; (expr (integer 13)) ] )) ; (expr (bits '0000010000000')) ] )) ] )) ))) ;
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Var ( (ident " result__4 ") )) , (expr Expr_TApply ( (ident " append_bits.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 56))) ] , [ (expr Expr_Slices ( (expr Expr_TApply ( (ident " lsr_bits.0 ") , [ (targs (expr (integer 128))) ; (targs (expr (integer 12))) ] , [ (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) ; (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 11))) ; (targs (expr (integer 12))) ] , [ (expr Expr_TApply ( (ident " mul_bits.0 ") , [ (targs (expr (integer 11))) ] , [ (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 8))) ; (targs (expr (integer 11))) ] , [ (expr Expr_Slices ( (expr Expr_Array ( (expr Expr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , [ (slice_expr Slice_LoWd ( (expr (integer 56)) , (expr (integer 8)) )) ] )) ; (expr (integer 11)) ] )) ; (expr (bits '00000001000')) ] )) ; (expr (integer 12)) ] )) ] )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 8)) )) ] )) ; (expr Expr_Slices ( (expr Expr_Var ( (ident " result__4 ") )) , [ (slice_expr Slice_LoWd ( (expr (integer 0)) , (expr (integer 56)) )) ] )) ] )) ))) ]) , [ ] ,
  (stmts [ ]) )))
  (stmt (assignment_stmt Stmt_Assign ( (lexpr LExpr_Array ( (lexpr LExpr_Var ( (ident " _Z ") )) , (expr (integer 0)) )) , (expr Expr_TApply ( (ident " ZeroExtend.0 ") , [ (targs (expr (integer 64))) ; (targs (expr (integer 128))) ] , [ (expr Expr_Var ( (ident " result__4 ") )) ; (expr (integer 128)) ] )) ))) <EOF>)

  $ cat antlr_err
